service: canary-aws-ping

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  
  environment:
    APP_VERSION: ${self:custom.version}
    SERVERLESS_STAGE: ${self:provider.stage}
    LOG_LEVEL: ${opt:log-level, 'info'}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'

custom:
  version: ${file(package.json):version}
  
  # LocalStack configuration
  localstack:
    stages:
      - local
    host: http://localhost
    edgePort: 4566
    autostart: true
    
  # Canary deployment configuration
  deploymentSettings:
    stages:
      prod:
        deploymentSettings:
          type: Canary10Percent5Minutes
          alarms:
            - AliasErrorMetricGreaterThanThresholdAlarm
            - AliasLatencyMetricGreaterThanThresholdAlarm
          hooks:
            preTraffic: !Ref PreTrafficValidationFunction
            postTraffic: !Ref PostTrafficValidationFunction

functions:
  ping:
    handler: src/handlers/ping.handler
    description: 'Ping service with Node.js version response'
    timeout: 10
    memorySize: 128
    
    # Enable versioning for canary deployments
    versioning: true
    
    # Configure Lambda aliases
    aliases:
      live:
        version: ${self:provider.stage}
        description: 'Live alias for canary deployments'
    
    events:
      - http:
          path: ping
          method: get
          cors: true

resources:
  Resources:
    # CloudWatch Alarms for Canary Deployments
    AliasErrorMetricGreaterThanThresholdAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmDescription: Lambda function errors for canary deployment
        ComparisonOperator: GreaterThanThreshold
        EvaluationPeriods: 2
        MetricName: Errors
        Namespace: AWS/Lambda
        Period: 60
        Statistic: Sum
        Threshold: 0
        Dimensions:
          - Name: FunctionName
            Value: !Ref PingLambdaFunction
          - Name: Resource
            Value: !Sub "${PingLambdaFunction}:${PingLambdaAlias}"
        
    AliasLatencyMetricGreaterThanThresholdAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmDescription: Lambda function latency for canary deployment
        ComparisonOperator: GreaterThanThreshold
        EvaluationPeriods: 2
        MetricName: Duration
        Namespace: AWS/Lambda
        Period: 60
        Statistic: Average
        Threshold: 1000
        Dimensions:
          - Name: FunctionName
            Value: !Ref PingLambdaFunction
          - Name: Resource
            Value: !Sub "${PingLambdaFunction}:${PingLambdaAlias}"

    # Pre-traffic validation function
    PreTrafficValidationFunction:
      Type: AWS::Lambda::Function
      Properties:
        FunctionName: !Sub '${self:service}-${self:provider.stage}-pre-traffic-validation'
        Runtime: nodejs20.x
        Handler: index.handler
        Role: !GetAtt PreTrafficValidationRole.Arn
        Code:
          ZipFile: |
            const aws = require('aws-sdk');
            const codedeploy = new aws.CodeDeploy();
            
            exports.handler = async (event) => {
              console.log('Pre-traffic validation started');
              
              try {
                // Add your pre-traffic validation logic here
                // For now, just return success
                
                await codedeploy.putLifecycleEventHookExecutionStatus({
                  deploymentId: event.DeploymentId,
                  lifecycleEventHookExecutionId: event.LifecycleEventHookExecutionId,
                  status: 'Succeeded'
                }).promise();
                
                console.log('Pre-traffic validation completed successfully');
              } catch (error) {
                console.error('Pre-traffic validation failed:', error);
                
                await codedeploy.putLifecycleEventHookExecutionStatus({
                  deploymentId: event.DeploymentId,
                  lifecycleEventHookExecutionId: event.LifecycleEventHookExecutionId,
                  status: 'Failed'
                }).promise();
              }
            };

    # Post-traffic validation function
    PostTrafficValidationFunction:
      Type: AWS::Lambda::Function
      Properties:
        FunctionName: !Sub '${self:service}-${self:provider.stage}-post-traffic-validation'
        Runtime: nodejs20.x
        Handler: index.handler
        Role: !GetAtt PostTrafficValidationRole.Arn
        Code:
          ZipFile: |
            const aws = require('aws-sdk');
            const codedeploy = new aws.CodeDeploy();
            
            exports.handler = async (event) => {
              console.log('Post-traffic validation started');
              
              try {
                // Add your post-traffic validation logic here
                // For now, just return success
                
                await codedeploy.putLifecycleEventHookExecutionStatus({
                  deploymentId: event.DeploymentId,
                  lifecycleEventHookExecutionId: event.LifecycleEventHookExecutionId,
                  status: 'Succeeded'
                }).promise();
                
                console.log('Post-traffic validation completed successfully');
              } catch (error) {
                console.error('Post-traffic validation failed:', error);
                
                await codedeploy.putLifecycleEventHookExecutionStatus({
                  deploymentId: event.DeploymentId,
                  lifecycleEventHookExecutionId: event.LifecycleEventHookExecutionId,
                  status: 'Failed'
                }).promise();
              }
            };

    # IAM roles for validation functions
    PreTrafficValidationRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        Policies:
          - PolicyName: CodeDeployPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - codedeploy:PutLifecycleEventHookExecutionStatus
                  Resource: '*'

    PostTrafficValidationRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        Policies:
          - PolicyName: CodeDeployPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - codedeploy:PutLifecycleEventHookExecutionStatus
                  Resource: '*'

plugins:
  - serverless-localstack